<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf_gui = noone;

seed = global.planet_seed;
terrain_type = global.planet_type;
terrain_id = noone;

switch(terrain_type)
{
    case terraintype.worms:
        terrain_id = terrain_preset_worms(seed);
        break;
        
    case terraintype.antfarm:
        terrain_id = terrain_preset_worms(antfarm);
        break;
    
    case terraintype.cheese:
        terrain_id = terrain_preset_worms(cheese);
        break;
        
    case terraintype.machined:
        terrain_id = terrain_preset_worms(machined);
        break;
        
    default:
        terrain_id = terrain_generate(seed, 0.47, 8, 20, 4);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// Create colliders around the player

if (instance_exists(obj_drone))
{
    var player_x = 0;
    var player_y = 0;
    var grid_x = 0;
    var grid_y = 0;
    with(obj_drone)
    {
        player_x = x;
        player_y = y;
        grid_x = x div CELL;
        grid_y = y div CELL;
        
        for (var i = grid_x-1; i &lt;= grid_x+1; i++)
        {
            for (var j = grid_y-1; j &lt;= grid_y+1; j++)
            {
                var xx = i*CELL;
                var yy = j*CELL;
                if (terrain_get_cell(i, j) and !collision_point(xx, yy, obj_collider, false, true))
                {
                    instance_create(xx, yy, obj_collider);
                }
            }
        }
    }
    
    with(obj_collider)
    {
        if (abs(x-player_x) &gt; CELL*2 or abs(y-player_y) &gt; CELL*2)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(terrain_id)
{
    if (gen_active)
    {
        draw_set_color(c_black);
        draw_rectangle(0, 0, view_wview[0], view_hview[0], false);
        
        var x1 = 32;
        var y1 = (view_hview[0] div 2) - 20;
        var x2 = view_wview[0] - 32;
        var y2 = (view_hview[0] div 2) + 20;
        
        var width = x2 - x1;
        
        draw_set_color(c_ltgray);
        draw_roundrect(x1-3, y1-3, x2+3, y2+3, false);
        
        draw_set_color(c_dkgray);
        draw_roundrect(x1, y1, x2, y2, false);
        
        draw_set_color(c_lime);
        draw_roundrect(x1, y1, x1+lerp(0, width, gen_progress), y2, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
