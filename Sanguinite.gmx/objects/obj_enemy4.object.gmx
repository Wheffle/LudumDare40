<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_enemy4</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>parent_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hp = 20;
image_speed = 1/30;

accel = 0.02;
top_speed = 0.5;

bullet_timer_set = room_speed;
bullet_timer = bullet_timer_set;

range = 500;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause) exit;

if (!instance_exists(target))
{
    var found_drone = false;
    if (instance_exists(obj_drone))
    {
        var drone = instance_nearest(x, y, obj_drone);
        if (distance_is_less(x, y, drone.x, drone.y, range, true))
        {
            target = drone;
            found_drone = true;
        }
    }
    
    /*if (!found_drone)
    {
        if (instance_exists(obj_dropship))
        {
            var dropship = instance_nearest(x, y, obj_dropship);
            if (point_distance(x, y, dropship.x, dropship.y) &lt;= range and
                !dropship.landing and !dropship.takeoff)
            {
                target = dropship;
            }
        }
    }*/
}

if (instance_exists(target))
{  
    var dir = point_direction(x, y, target.x, target.y);
    motion_add(dir, accel);
    if (speed &gt; top_speed) speed = top_speed;   
}
else if (speed &gt; 0)
{
    speed -= accel;
    if (speed &lt; 0) speed = 0;
}

x += hspeed;
y += vspeed;

// Check collision with player
if (attack_timer &gt; 0)
{
    attack_timer--;
}
else
{
    var drone = instance_position(x, y, obj_drone);
    if (drone)
    {
        attack_timer = attack_timer_set;
        var attack_force = speed*5;
        var attack_dir = direction;
        with(drone)
        {   
            var fx = lengthdir_x(attack_force, attack_dir);
            var fy = lengthdir_y(attack_force, attack_dir);
            physics_apply_local_impulse(x, y, fx, fy);
            
            repeat(3)
            {
                vfx_create_moon(x, y, other.speed, 0.3, other.direction, 15, 0.45, 0.05, c_yellow);
            }
        }
        damage_drone(drone, damage);
    }   
}

// Shoot Bullets
if (instance_exists(target))
{
    if (bullet_timer &gt; 0)
    {
        bullet_timer--;
    }
    else
    {
        bullet_timer = bullet_timer_set;
        if (distance_is_less(x, y, target.x, target.y, range, true))
        {
            audio_play_sound(sfx_enemyshot, SFX_PRIORITY, false);
            var bullet = instance_create(x, y, obj_enemybullet);
            bullet.direction = point_direction(x, y, target.x, target.y);
            bullet.image_angle = bullet.direction;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
