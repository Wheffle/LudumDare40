<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>width = room_width div CELL;
height = room_height div CELL;

grid = ds_grid_create(width, height);

terrain_graphic = global.planet_tile;
terrain_color = global.planet_color;

gen_active = true;
gen_state = terraingen.start;
gen_progress = 0;
gen_progress_step = 1/7;
gen_time = get_timer();

seed = 1;
density = 0.47;
smooth = 8;
smallest_room = 12;
smooth_thresh = 4;

list = noone;
idx = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gen_active) 
{
    /*
    generate terrain process
    
    terraingen enum:
        start
        noise
        smoothing
        perlin
        find_rooms
        prune_rooms
        connect_rooms
        tileset
        complete
    }
    */

    switch(gen_state) 
    {
        case terraingen.start:
            //start: move on to first step
            show_debug_message("generating new terrain");
            show_debug_message("seed: " + string(seed));
            show_debug_message("density: " + string(density));
            show_debug_message("smooth: " + string(smooth));
            show_debug_message("smallest room size: " + string(smallest_room));
            gen_state = terraingen.noise;
            break;
            
        case terraingen.noise:
            //create white noise map
            show_debug_message("creating noise map...");
            grid_noise(grid, density, seed);
            idx = 0;
            gen_progress += gen_progress_step;
            gen_state = terraingen.smoothing;
            break;
            
        case terraingen.smoothing:
            //smooth noise map with cellular automation passses
            show_debug_message("smoothing pass " + string(idx+1) + "...");
            grid_smooth(grid, smooth_thresh);
            idx++;
            gen_progress += gen_progress_step * (1 / max(smooth, 1));
            if (idx &gt;= smooth) {
                idx = 0;
                gen_state = terraingen.perlin;
            }
            break;
            
        case terraingen.perlin:
            //create a surface using 1d perlin noise
            show_debug_message("creating surface...");
            grid_perlinize_surface(grid, 3, 15);
            gen_progress += gen_progress_step;
            gen_state = terraingen.find_rooms;
            break;
            
        case terraingen.find_rooms:
            //find rooms using 'paint fill' algorithms
            show_debug_message("identifying rooms...");
            list = grid_find_pockets(grid);
            gen_progress += gen_progress_step;
            gen_state = terraingen.prune_rooms;
            break;
            
        case terraingen.prune_rooms:
            //prune small rooms
            var pruned_rooms = 0;
            for (var k = 0; k &lt; ds_list_size(list); k++) 
            {
                var pocket = ds_list_find_value(list, k);
                if (pocket_get_size(pocket) &lt; smallest_room and pocket.type &gt; -1) 
                {
                    pocket_fill(pocket, grid);
                    ds_list_delete(list, k);
                    pruned_rooms++;
                    k--;
                }   
            }
            if (pruned_rooms &gt; 0) show_debug_message(string(pruned_rooms) + " small rooms pruned"); 
            gen_progress += gen_progress_step;
            gen_state = terraingen.connect_rooms;
            break;
            
        case terraingen.connect_rooms:
            //ensure that all rooms are accessible
            if (ds_list_size(list) &gt; 1) 
            {
                show_debug_message("connecting rooms...");
                grid_connect_pockets(grid, list);
            }
            gen_progress += gen_progress_step;
            gen_state = terraingen.tileset;
            break;
            
        case terraingen.tileset:
            //assign tiles to grid cells appropriately
            show_debug_message("building tileset...");
            grid_create_tiles();
            gen_progress = 1;
            gen_state = terraingen.complete;
            break;
            
        case terraingen.complete:
            //finish
            show_debug_message("complete!");
            ds_list_destroy(list);
            gen_time = get_timer() - gen_time;
            gen_time = gen_time div 1000;
            show_debug_message("elapsed time: " + string(gen_time) + "ms");
            gen_active = false;            
            instance_create(15, 15, obj_drone);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
